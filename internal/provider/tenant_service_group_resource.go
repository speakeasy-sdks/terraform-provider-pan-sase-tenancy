// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"pan-sase-tenancy/internal/sdk"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"pan-sase-tenancy/internal/sdk/pkg/models/operations"
	"pan-sase-tenancy/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &TenantServiceGroupResource{}
var _ resource.ResourceWithImportState = &TenantServiceGroupResource{}

func NewTenantServiceGroupResource() resource.Resource {
	return &TenantServiceGroupResource{}
}

// TenantServiceGroupResource defines the resource implementation.
type TenantServiceGroupResource struct {
	client *sdk.SDK
}

// TenantServiceGroupResourceModel describes the resource data model.
type TenantServiceGroupResourceModel struct {
	DisplayName    types.String `tfsdk:"display_name"`
	ID             types.String `tfsdk:"id"`
	ParentID       types.String `tfsdk:"parent_id"`
	SupportContact types.String `tfsdk:"support_contact"`
	Vertical       types.String `tfsdk:"vertical"`
}

func (r *TenantServiceGroupResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_tenant_service_group"
}

func (r *TenantServiceGroupResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "TenantServiceGroup Resource",

		Attributes: map[string]schema.Attribute{
			"display_name": schema.StringAttribute{
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"parent_id": schema.StringAttribute{
				Optional: true,
			},
			"support_contact": schema.StringAttribute{
				Optional: true,
			},
			"vertical": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"High Tech",
						"Education",
						"Manufacturing",
						"Hospitality",
						"Professional & Legal Services",
						"Wholesale & Retail",
						"Finance",
						"Telecommunications",
						"State & Local Government",
						"Transportation & Logistics",
						"Federal Government",
						"Media & Entertainment",
						"Nonclassifiable Establishments",
						"Healthcare",
						"Utilities & Energy",
						"Insurance",
						"Agriculture",
						"Pharma & Life Sciences",
						"Construction",
						"Aerospace & Defense",
						"Real Estate",
						"Restaurant/Food Industry",
						"Other",
					),
				},
				MarkdownDescription: `A token that identifies the business vertical supported by the SASE` + "\n" +
					`products managed by this TSG.` + "\n" +
					``,
			},
		},
	}
}

func (r *TenantServiceGroupResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *TenantServiceGroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *TenantServiceGroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToCreateSDKType()
	res, err := r.client.TenantServiceGroup.PostTenancyV1TenantServiceGroups(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TenantServiceGroup == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.TenantServiceGroup)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TenantServiceGroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *TenantServiceGroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	tsgID := data.ID.ValueString()
	request := operations.GetTenancyV1TenantServiceGroupsTsgIDRequest{
		TsgID: tsgID,
	}
	res, err := r.client.TenantServiceGroup.GetTenancyV1TenantServiceGroupsTsgID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TenantServiceGroup == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.TenantServiceGroup)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TenantServiceGroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *TenantServiceGroupResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	displayName := new(string)
	if !data.DisplayName.IsUnknown() && !data.DisplayName.IsNull() {
		*displayName = data.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	supportContact := new(string)
	if !data.SupportContact.IsUnknown() && !data.SupportContact.IsNull() {
		*supportContact = data.SupportContact.ValueString()
	} else {
		supportContact = nil
	}
	vertical := new(shared.TenantServiceGroupUpdateVertical)
	if !data.Vertical.IsUnknown() && !data.Vertical.IsNull() {
		*vertical = shared.TenantServiceGroupUpdateVertical(data.Vertical.ValueString())
	} else {
		vertical = nil
	}
	tenantServiceGroupUpdate := shared.TenantServiceGroupUpdate{
		DisplayName:    displayName,
		SupportContact: supportContact,
		Vertical:       vertical,
	}
	tsgID := data.ID.ValueString()
	request := operations.PutTenancyV1TenantServiceGroupsTsgIDRequest{
		TenantServiceGroupUpdate: tenantServiceGroupUpdate,
		TsgID:                    tsgID,
	}
	res, err := r.client.TenantServiceGroup.PutTenancyV1TenantServiceGroupsTsgID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.TenantServiceGroup == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.TenantServiceGroup)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *TenantServiceGroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *TenantServiceGroupResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	tsgID := data.ID.ValueString()
	request := operations.DeleteTenancyV1TenantServiceGroupsTsgIDRequest{
		TsgID: tsgID,
	}
	res, err := r.client.TenantServiceGroup.DeleteTenancyV1TenantServiceGroupsTsgID(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *TenantServiceGroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
